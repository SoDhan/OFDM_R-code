k=Rx_sig[(i-1)*length(t)+1:i*length(t)]
i=i=1
k=Rx_sig[(i-1)*length(t)+1:i*length(t)]
source('~/GitHub/OFDM_R-code/test.R')
library(pracma)
Number_of_bit=1024;
data=ifelse(rand(1,Number_of_bit)>0.5,1,0);
stem(data)
data_NZR=2*data-1; # Data Represented at NZR form for QPSK modulation
s_p_data=matrix(data_NZR,2,length(data)/2);  # S/P convertion of data
br=1e6; #Let us transmission bit rate  1000000
f=br; # minimum carrier frequency
T=1/br; # bit duration
t=T/3:T/3:T; # Time vector for one bit information
y=c();
y_in=c();
y_qd=c();
source('~/GitHub/OFDM_R-code/test.R', echo=TRUE)
source('~/GitHub/OFDM_R-code/test.R')
source('~/GitHub/OFDM_R-code/test.R')
source('~/GitHub/OFDM_R-code/test.R')
library(pracma)
Number_of_bit=1024
data=ifelse(rand(1,Number_of_bit)>0.5,1,0)
data_NZR=2*data-1  # Data Represented at NZR form for QPSK modulation
s_p_data=matrix(data_NZR,2,length(data)/2)   # S/P convertion of data
br=1e6  #Let us transmission bit rate  1000000
f=br  # minimum carrier frequency
T=1/br  # bit duration
t=T/3:T/3:T  # Time vector for one bit information
y=c()
y_in=c()
y_qd=c()
for(i in 1:length(data)/2) {
y1=s_p_data[1,i]*cos(2*pi*f*t)  # inphase component
y2=s_p_data[2,i]*sin(2*pi*f*t)  # Quadrature component
y_in=c(y_in,y1)  # inphase signal vector
y_qd=c(y_qd,y2)  #quadrature signal vector
y=c(y,y1+y2)  # modulated signal vector
}
Tx_sig=y  # transmitting signal after modulation
Rx_data=c()
Rx_sig=Tx_sig  # Received signal
debugSource('~/GitHub/OFDM_R-code/test.R', echo=TRUE)
debugSource('~/GitHub/OFDM_R-code/test.R', echo=TRUE)
debugSource('~/GitHub/OFDM_R-code/test.R', echo=TRUE)
library(pracma)
Number_of_bit=1024
data=ifelse(rand(1,Number_of_bit)>0.5,1,0)
data_NZR=2*data-1  # Data Represented at NZR form for QPSK modulation
s_p_data=matrix(data_NZR,2,length(data)/2)   # S/P convertion of data
br=1e6  #Let us transmission bit rate  1000000
f=br  # minimum carrier frequency
T=1/br  # bit duration
t=T/3:T/3:T  # Time vector for one bit information
# XXXXXXXXXXXXXXXXXXXXXXX QPSK modulatio  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
y=c()
y_in=c()
y_qd=c()
for(i in 1:length(data)/2) {
y1=s_p_data[1,i]*cos(2*pi*f*t)  # inphase component
y2=s_p_data[2,i]*sin(2*pi*f*t)  # Quadrature component
y_in=c(y_in,y1)  # inphase signal vector
y_qd=c(y_qd,y2)  #quadrature signal vector
y=c(y,y1+y2)  # modulated signal vector
}
Tx_sig=y  # transmitting signal after modulation
#####Demod###
Rx_data=c()
Rx_sig=Tx_sig  # Received signal
debugSource('~/GitHub/OFDM_R-code/test.R', echo=TRUE)
library(pracma)
Number_of_bit=1024
data=ifelse(rand(1,Number_of_bit)>0.5,1,0)
data_NZR=2*data-1  # Data Represented at NZR form for QPSK modulation
s_p_data=matrix(data_NZR,2,length(data)/2)   # S/P convertion of data
br=1e6  #Let us transmission bit rate  1000000
f=br  # minimum carrier frequency
T=1/br  # bit duration
t=T/3:T/3:T  # Time vector for one bit information
# XXXXXXXXXXXXXXXXXXXXXXX QPSK modulatio  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
y=c()
y_in=c()
y_qd=c()
for(i in 1:length(data)/2) {
y1=s_p_data[1,i]*cos(2*pi*f*t)  # inphase component
y2=s_p_data[2,i]*sin(2*pi*f*t)  # Quadrature component
y_in=c(y_in,y1)  # inphase signal vector
y_qd=c(y_qd,y2)  #quadrature signal vector
y=c(y,y1+y2)  # modulated signal vector
}
Tx_sig=y  # transmitting signal after modulation
#####Demod###
Rx_data=c()
Rx_sig=Tx_sig  # Received signal
for(i in 1:(length(data)/2)) {
##XXXXXX inphase coherent dector XXXXXXX
la = (i-1)*length(t)+1
ra = i*length(t)
Z_in=Rx_sig[la:ra]*cos(2*pi*f*t)
# above line indicat multiplication of received & inphase carred signal
Z_in_intg=(trapz(t,Z_in))*(2/T)# integration using trapizodial rull
# Decession Maker
Rx_in_data=ifelse(Z_in_intg>0,1,0)
##XXXXXX Quadrature coherent dector XXXXXX
Z_qd=Rx_sig[((i-1)*length(t)+1:i*length(t))]*sin(2*pi*f*t)
#above line indicat multiplication ofreceived & Quadphase carred signal
Z_qd_intg=(trapz(t,Z_qd))*(2/T) #integration using trapizodial rull
Rx_qd_data=ifelse(Z_qd_intg>0,1,0)
Rx_data=c(Rx_data,Rx_in_data,Rx_qd_data)  # Received Data vector
}
stem(Rx_data)
library(pracma)
Number_of_bit=1024
data=ifelse(rand(1,Number_of_bit)>0.5,1,0)
data_NZR=2*data-1  # Data Represented at NZR form for QPSK modulation
s_p_data=matrix(data_NZR,2,length(data)/2)   # S/P convertion of data
br=1e6  #Let us transmission bit rate  1000000
f=br  # minimum carrier frequency
T=1/br  # bit duration
t=T/3:T/3:T  # Time vector for one bit information
# XXXXXXXXXXXXXXXXXXXXXXX QPSK modulatio  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
y=c()
y_in=c()
y_qd=c()
for(i in 1:(length(data)/2)) {
y1=s_p_data[1,i]*cos(2*pi*f*t)  # inphase component
y2=s_p_data[2,i]*sin(2*pi*f*t)  # Quadrature component
y_in=c(y_in,y1)  # inphase signal vector
y_qd=c(y_qd,y2)  #quadrature signal vector
y=c(y,y1+y2)  # modulated signal vector
}
Tx_sig=y  # transmitting signal after modulation
#####Demod###
Rx_data=c()
Rx_sig=Tx_sig  # Received signal
for(i in 1:(length(data)/2)) {
##XXXXXX inphase coherent dector XXXXXXX
la = (i-1)*length(t)+1
ra = i*length(t)
Z_in=Rx_sig[la:ra]*cos(2*pi*f*t)
# above line indicat multiplication of received & inphase carred signal
Z_in_intg=(trapz(t,Z_in))*(2/T)# integration using trapizodial rull
# Decession Maker
Rx_in_data=ifelse(Z_in_intg>0,1,0)
##XXXXXX Quadrature coherent dector XXXXXX
Z_qd=Rx_sig[((i-1)*length(t)+1:i*length(t))]*sin(2*pi*f*t)
#above line indicat multiplication ofreceived & Quadphase carred signal
Z_qd_intg=(trapz(t,Z_qd))*(2/T) #integration using trapizodial rull
Rx_qd_data=ifelse(Z_qd_intg>0,1,0)
Rx_data=c(Rx_data,Rx_in_data,Rx_qd_data)  # Received Data vector
}
debugSource('~/GitHub/OFDM_R-code/test.R')
debugSource('~/GitHub/OFDM_R-code/test.R')
source('~/GitHub/OFDM_R-code/test.R')
source('~/GitHub/OFDM_R-code/test.R')
source('~/GitHub/OFDM_R-code/test.R')
source('~/GitHub/OFDM_R-code/test.R')
debugSource('~/GitHub/OFDM_R-code/Main.R', echo=TRUE)
library("signal")
library("seewave")
library("Matrix")
library("pracma")
source("qpskmod.R")
source("qpskdemod.R")
source("tdf.R")
source("interpolate.R")
source("ber.R")
source("awgn.R")
N = 1024
pilotFrequency = 8
E = 0.1
Ncp = 64
L = 32
br=1e6;
f=br;
T=1/br;
t=T/3:T/3:T;
D = as.integer(as.logical(as.integer(randn (1, N))))
D_Mod_serial = mod(D)
## serial to parallel
#D_Mod_serial = t(D_Mod)
## specify Pilot & Date Locations
PLoc = seq(1, N, pilotFrequency)
# location of pilots
DLoc = setdiff(1:N, PLoc)
# location of data
## Pilot Insertion
D_Mod_serial[PLoc] = E * D_Mod_serial[PLoc]
###figure;
###imagesc(abs(D_Mod_serial ))
## inverse discret Fourier transform (IFFT)
#  Amplitude Modulation
d_ifft = fft(D_Mod_serial, inverse = TRUE)
## parallel to serail
d_ifft_parallel = t(d_ifft)
## Adding Cyclic Prefix
CP_part = d_ifft_parallel[(nrow(d_ifft_parallel) - (Ncp - 1)):nrow(d_ifft_parallel),1:ncol(d_ifft_parallel)]
# this is the Cyclic Prefix part to be appended.
ofdm_cp = c(CP_part, d_ifft_parallel)
## generating random channel
h = randn(L,1) + complex(imaginary = 1) * randn(L,1)
h = h / base::norm( h ,'2' )
# normalization
H = fft(h)
# Frequency-Domain Channel
d_channelled = complex(real = signal::filter(h, 1, Re(ofdm_cp)), imaginary = signal::filter(h, 1, Im(ofdm_cp)) )
#d_channelled2 = filter(filt = h, a= 1, x = ofdm_cp)
#Sd_channelled = d_channelled*d_channelled
# channel effect
channel_length = length(h)
# True channel and its time-domain length
H_power_dB = 10 * log10(abs(H %*% Conj(t(H))))
# True channel power in dB
## add noise
count = 0
snr_vector = seq(0, 40, 4)
r_NoCH=1
r_LS=1
r_MMSE=1
for (snr in snr_vector)  {
SNR = snr
count = count + 1
print(c("step: ", count, " of: ", length(snr_vector)))
ofdm_noisy_NoCH = c(aw(ofdm_cp, SNR))
ofdm_noisy_with_chann = c(aw(d_channelled, SNR))
## receiver
#Remove Cyclic Prefix
ofdm_cp_removed_NoCH = ofdm_noisy_NoCH[(Ncp +1):(N+Ncp)]
ofdm_cp_removed_with_chann = ofdm_noisy_with_chann[(Ncp +1):(N+Ncp)]
## Discret Fourier transform (FFT)
#  Amplitude Demodulation
d_parallel_fft_NoCH = fft(ofdm_cp_removed_NoCH, inverse = FALSE)
d_parallel_fft_channel = fft(ofdm_cp_removed_with_chann, inverse = FALSE)
## channel estimation
# Extracting received pilots
TxP = D_Mod_serial[PLoc]
# trnasmitted pilots
RxP = d_parallel_fft_channel[PLoc]
# received pilots
# Least-Square Estimation
Hpilot_LS = RxP / TxP
# LS channel estimation
# MMSE Estimation:-
H_MMSE = MMSE(RxP, TxP, N, pilotFrequency, h, SNR)
# Interpolation p--->N
HData_LS = interpolate(t(Hpilot_LS), PLoc, N, "spline")
# Linear/Spline interpolation
## parallel to serial
HData_LS_parallel1 = t(HData_LS)
HData_MMSE_parallel1 = t(H_MMSE)
## demapping
d_received_NoCH = dmod(t(d_parallel_fft_NoCH))
# No Channel
d_received_chann_LS = dmod(t(d_parallel_fft_channel) / HData_LS_parallel1)
# LS channel estimation
d_received_chann_MMSE = dmod(d_parallel_fft_channel / HData_MMSE_parallel1)
# MMSE channel estimation
## Removing Pilots from received data and original data
D_no_pilots = D_Mod_serial[DLoc]
# removing pilots from D
Rec_d_NoCH = d_received_NoCH[DLoc]
# removing pilots from d_received_NoCH
Rec_d_LS = d_received_chann_LS[DLoc]
# removing pilots from d_received_chann_LS
Rec_d_MMSE = d_received_chann_MMSE[DLoc]
# removing pilots from d_received_chann_MMSE
## Calculating BER
r_NoCH[count] = ber(D_no_pilots, Rec_d_NoCH)
r_LS[count] = ber(D_no_pilots, Rec_d_LS)
r_MMSE[count] = ber(D_no_pilots, Rec_d_MMSE)
}
semilogy(snr_vector, r_NoCH, type ='l', col="red")
par(new=TRUE)
semilogy(snr_vector, r_LS, type ='l', col="green")
par(new=TRUE)
semilogy(snr_vector, r_MMSE, type ='l', col="black")
H_power_esti_dB_LS = 10 * log10(abs(HData_LS_parallel1 %*% Conj(t(HData_LS_parallel1))))
# Estimated channel power in dB
H_power_esti_dB_MMSE = 10 * log10(abs(HData_MMSE_parallel1 %*% Conj(t(HData_MMSE_parallel1))))
# Estimated channel power in dB
plot(H_power_dB[seq(1, length(H_power_dB), 8)], type ='l', col="green")
par(new=TRUE)
plot(H_power_esti_dB_LS[seq(1, ncol(H_power_esti_dB_LS), 8)], type ='p', col="black")
par(new=TRUE)
plot(H_power_esti_dB_MMSE[1, seq(1, ncol(H_power_esti_dB_MMSE), 8)], type ='l', col="red")
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/mmse.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/mmse.R')
source('~/GitHub/OFDM_R-code/Main.R')
library("signal")
library("seewave")
library("Matrix")
library("pracma")
source("qpskmod.R")
source("qpskdemod.R")
source("mmse.R")
source("interpolate.R")
source("ber.R")
source("awgn.R")
N = 1024
pilotFrequency = 8
E = 0.1
Ncp = 64
L = 32
br=1e6;
f=br;
T=1/br;
t=T/3:T/3:T;
D = as.integer(as.logical(as.integer(randn (1, N))))
D_Mod = mod(D)
D_Mod_serial = t(D_Mod)
PLoc = seq(1, N, pilotFrequency)
DLoc = setdiff(1:N, PLoc)
D_Mod_serial[PLoc] = E * D_Mod_serial[PLoc]
d_ifft = fft(D_Mod_serial, inverse = TRUE)
View(d_ifft)
d_ifft_parallel = t(d_ifft)
CP_part = d_ifft_parallel[(nrow(d_ifft_parallel) - (Ncp - 1)):nrow(d_ifft_parallel),1:ncol(d_ifft_parallel)]
CP_part
ofdm_cp = c(CP_part, d_ifft_parallel)
h = randn(L,1) + complex(imaginary = 1) * randn(L,1)
h = h / base::norm( h ,'2' )
H = fft(h)
d_channelled = complex(real = signal::filter(h, 1, Re(ofdm_cp)), imaginary = signal::filter(h, 1, Im(ofdm_cp)) )
d_channelled
channel_length = length(h)
H_power_dB = 10 * log10(abs(H %*% Conj(t(H))))
count = 0
snr_vector = seq(0, 40, 4)
r_NoCH=1
r_LS=1
r_MMSE=1
for (snr in snr_vector)  {
SNR = snr
count = count + 1
print(c("step: ", count, " of: ", length(snr_vector)))
ofdm_noisy_NoCH = c(aw(ofdm_cp, SNR))
ofdm_noisy_with_chann = c(aw(d_channelled, SNR))
## receiver
#Remove Cyclic Prefix
ofdm_cp_removed_NoCH = ofdm_noisy_NoCH[(Ncp +1):(N+Ncp)]
ofdm_cp_removed_with_chann = ofdm_noisy_with_chann[(Ncp +1):(N+Ncp)]
## Discret Fourier transform (FFT)
#  Amplitude Demodulation
d_parallel_fft_NoCH = fft(ofdm_cp_removed_NoCH, inverse = FALSE)
d_parallel_fft_channel = fft(ofdm_cp_removed_with_chann, inverse = FALSE)
## channel estimation
# Extracting received pilots
TxP = D_Mod_serial[PLoc]
# trnasmitted pilots
RxP = d_parallel_fft_channel[PLoc]
# received pilots
# Least-Square Estimation
Hpilot_LS = RxP / TxP
# LS channel estimation
# MMSE Estimation:-
H_MMSE = MMSE(RxP, TxP, N, pilotFrequency, h, SNR)
# Interpolation p--->N
HData_LS = interpolate(t(Hpilot_LS), PLoc, N, "spline")
# Linear/Spline interpolation
## parallel to serial
HData_LS_parallel1 = t(HData_LS)
HData_MMSE_parallel1 = t(H_MMSE)
## demapping
d_received_NoCH = dmod(t(d_parallel_fft_NoCH))
# No Channel
d_received_chann_LS = dmod(t(d_parallel_fft_channel) / HData_LS_parallel1)
# LS channel estimation
d_received_chann_MMSE = dmod(d_parallel_fft_channel / HData_MMSE_parallel1)
# MMSE channel estimation
## Removing Pilots from received data and original data
D_no_pilots = D_Mod_serial[DLoc]
# removing pilots from D
Rec_d_NoCH = d_received_NoCH[DLoc]
# removing pilots from d_received_NoCH
Rec_d_LS = d_received_chann_LS[DLoc]
# removing pilots from d_received_chann_LS
Rec_d_MMSE = d_received_chann_MMSE[DLoc]
# removing pilots from d_received_chann_MMSE
## Calculating BER
r_NoCH[count] = ber(D_no_pilots, Rec_d_NoCH)
r_LS[count] = ber(D_no_pilots, Rec_d_LS)
r_MMSE[count] = ber(D_no_pilots, Rec_d_MMSE)
}
library("signal")
library("seewave")
library("Matrix")
library("pracma")
source("qpskmod.R")
source("qpskdemod.R")
source("mmse.R")
source("interpolate.R")
source("ber.R")
source("awgn.R")
N = 1024
pilotFrequency = 8
E = 0.1
Ncp = 64
L = 32
br=1e6;
f=br;
T=1/br;
t=T/3:T/3:T;
D = as.integer(as.logical(as.integer(randn (1, N))))
D_Mod = mod(D)
## serial to parallel
D_Mod_serial = t(D_Mod)
## specify Pilot & Date Locations
PLoc = seq(1, N, pilotFrequency)
# location of pilots
DLoc = setdiff(1:N, PLoc)
# location of data
## Pilot Insertion
D_Mod_serial[PLoc] = E * D_Mod_serial[PLoc]
###figure;
###imagesc(abs(D_Mod_serial ))
## inverse discret Fourier transform (IFFT)
#  Amplitude Modulation
d_ifft = fft(D_Mod_serial, inverse = TRUE)
## parallel to serail
d_ifft_parallel = t(d_ifft)
## Adding Cyclic Prefix
CP_part = d_ifft_parallel[(nrow(d_ifft_parallel) - (Ncp - 1)):nrow(d_ifft_parallel),1:ncol(d_ifft_parallel)]
# this is the Cyclic Prefix part to be appended.
ofdm_cp = c(CP_part, d_ifft_parallel)
## generating random channel
h = randn(L,1) + complex(imaginary = 1) * randn(L,1)
h = h / base::norm( h ,'2' )
# normalization
H = fft(h)
# Frequency-Domain Channel
d_channelled = complex(real = signal::filter(h, 1, Re(ofdm_cp)), imaginary = signal::filter(h, 1, Im(ofdm_cp)) )
#d_channelled2 = filter(filt = h, a= 1, x = ofdm_cp)
#Sd_channelled = d_channelled*d_channelled
# channel effect
channel_length = length(h)
# True channel and its time-domain length
H_power_dB = 10 * log10(abs(H %*% Conj(t(H))))
# True channel power in dB
## add noise
count = 0
snr_vector = seq(0, 40, 4)
r_NoCH=1
r_LS=1
r_MMSE=1
debugSource('~/GitHub/OFDM_R-code/Main.R', echo=TRUE)
debugSource('~/GitHub/OFDM_R-code/Main.R')
debugSource('~/GitHub/OFDM_R-code/Main.R')
debugSource('~/GitHub/OFDM_R-code/Main.R')
## demapping
d_received_NoCH = dmod(t(d_parallel_fft_NoCH))
debugSource('~/GitHub/OFDM_R-code/Main.R', echo=TRUE)
debugSource('~/GitHub/OFDM_R-code/Main.R', echo=TRUE)
debugSource('~/GitHub/OFDM_R-code/Main.R', echo=TRUE)
debugSource('~/GitHub/OFDM_R-code/Main.R', echo=TRUE)
Z_in_intg
Q
debugSource('~/GitHub/OFDM_R-code/Main.R', echo=TRUE)
debugSource('~/GitHub/OFDM_R-code/Main.R', echo=TRUE)
debugSource('~/GitHub/OFDM_R-code/Main.R')
debugSource('~/GitHub/OFDM_R-code/Main.R')
Q
debugSource('~/GitHub/OFDM_R-code/Main.R')
debugSource('~/GitHub/OFDM_R-code/Main.R')
e = nnzero(s3)/length(s1)
e = nnzero(s3)/length(s2)
debugSource('~/GitHub/OFDM_R-code/Main.R')
s3
s1
s2
debugSource('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
H_power_esti_dB_LS
length(HData_MMSE_parallel1)
length(HData_MMSE_parallel1)
length(HData_LS_parallel1)
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R')
source('~/GitHub/OFDM_R-code/Main.R', echo=TRUE)
View(ber)
View(ber)
r_NoCH
source('~/GitHub/OFDM_R-code/Main.R', echo=TRUE)
source('~/GitHub/OFDM_R-code/Main.R', echo=TRUE)
r_NoCH
